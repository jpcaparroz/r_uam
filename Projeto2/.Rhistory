dados <- read.csv(fileSource)
# Importando dataset de um arquivo
fileSource = 'C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto/files/dataset.csv'
dados <- read.csv(fileSource)
# Renomeando colunas do arquivo
names(dados) <- c("Pais","Ano","Nivel_Vida", "PIB_Per_Capta", "Suporte_Social",
"Expectativa_Vida","Indice_Liberdade", "Indice_Generosidade",
"Percepcao_Corrupcao", "Emocoes_Positivas","Emocoes_Negativas" )
# Removendo nulls
dadosF <- na.omit(dados)
# Removendo valores baixos
dadosF <- dadosF [
dadosF$Ano!=2005 &
dadosF$Ano!=2006 &
dadosF$Ano!=2007 &
dadosF$Ano!=2020,
]
boxplot(dadosF$Nivel_Vida)
# Quantidade de linhas por ano
View(
sort(
table(dadosF$Ano),
decreasing = TRUE
)
)
# Removendo nulls
dadosF <- na.omit(dados)
cor.test(x = dadosF$Nivel_Vida,
y = dadosF$Percepcao_Corrupcao)
# Removendo valores baixos
dadosF <- dadosF [
dadosF$Ano!=2005 &
dadosF$Ano!=2006 &
dadosF$Ano!=2007 &
dadosF$Ano!=2020,
]
boxplot(dados$Expectativa_Vida)
# PIB tem relação com a expectativa de vida?
boxplot(dadosF$PIB_Per_Capta)
media_vida_felicidade <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano)
# Libs
library(dplyr)
library(ggplot2)
media_vida_felicidade <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano)
View(
dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(media_vida_felicidade = mean(nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
View(
dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
View(
dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
media <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
View(dados)
View(
media <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(Nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
dados <- read.csv(fileSource)
# Renomeando colunas do arquivo
names(dados) <- c("Pais","Ano","Nivel_Vida", "PIB_Per_Capta", "Suporte_Social",
"Expectativa_Vida","Indice_Liberdade", "Indice_Generosidade",
"Percepcao_Corrupcao", "Emocoes_Positivas","Emocoes_Negativas" )
View(
media <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(Nivel_vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
View(dados)
View(
media <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(Nivel_Vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
View(
media_felicidade <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(Nivel_Vida),
Media_Emmocoes_positivas = mean(Emocoes_Positivas))
)
View(
media_felicidade <- dados %>%
select(Pais, Ano, Nivel_Vida,Emocoes_Positivas) %>%
group_by(Pais, Ano) %>%
summarise(Media_vida_felicidade = mean(Nivel_Vida),
Media_emocoes_positivas = mean(Emocoes_Positivas))
)
#plotando
ggplot(media_felicidade,
aes(x= Media_vida_felicidade,
y= Media_emocoes_positivas)) +
geom_point()+
geom_smooth(method = lm)
#plotando
ggplot(media_felicidade,
title("Média de vida/emocões positivas"),
aes(x= Media_vida_felicidade,
y= Media_emocoes_positivas)) +
geom_point()+
geom_smooth(method = lm)
#plotando
ggplot(media_felicidade,
title("Média de vida/emocões positivas"),
aes(x= Media_vida_felicidade,
y= Media_emocoes_positivas)) +
geom_point()+
geom_smooth(method = lm)
#plotando
ggplot(media_felicidade,
title(Média de vida/emocões positivas),
#plotando
ggplot(media_felicidade,
title("Média de vida/emocões positivas"),
aes(x= Media_vida_felicidade,
y= Media_emocoes_positivas)) +
geom_point()+
geom_smooth(method = lm)
#plotando
ggplot(media_felicidade,
aes(x= Media_vida_felicidade,
y= Media_emocoes_positivas)) +
geom_point()+
geom_smooth(method = lm) +
ggtitle("Média de vida/emocões positivas")
cor.test(x= media_felicidade$Media_vida_felicidade,
y= media_felicidade$Media_emocoes_positivas,
method = 'pearson')
View(
pais_menor <- dados %>%
select(Pais, Suporte_Social,Percepcao_Corrupcao) %>%
group_by(Pais) %>%
summarise(media_suporte = mean(Suporte_Social),
media_corrupcao = mean(Percepcao_Corrupcao))
)
View(
na.omit(pais_menor)
pais_menor <- dados %>%
View(
na.omit(
pais_menor <- dados %>%
select(Pais, Suporte_Social,Percepcao_Corrupcao) %>%
group_by(Pais) %>%
summarise(media_suporte = mean(Suporte_Social),
media_corrupcao = mean(Percepcao_Corrupcao))
)
)
min(pais_menor$media_suporte)
View(
pais_menor <- dados %>%
select(Pais, Suporte_Social,Percepcao_Corrupcao) %>%
group_by(Pais) %>%
summarise(media_suporte = mean(Suporte_Social),
media_corrupcao = mean(Percepcao_Corrupcao)) %>%
na.omit()
)
min(pais_menor$media_suporte)
max(pais_menor$media_suporte)
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_point()
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_point() +
geom_smooth(lm)
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_point() +
geom_smooth(method = lm)
ggplot(pais_menor,
aes(x=Pais,
y=min(pais_menor$media_suporte))) +
geom_point() +
geom_smooth(method = lm)
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_point() +
geom_smooth(method = lm)
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_density(fill = "purple")
ggplot(pais_menor,
aes(x=Pais,
y=media_suporte)) +
geom_histogram(bins = 20, fill = "white", color = "black")
ggplot(pais_menor,
aes(media_suporte)) +
geom_histogram(bins = 20, fill = "white", color = "black")
ggplot(pais_menor,
aes(media_suporte)) +
geom_histogram(bins = 20, fill = "white", color = "black") +
geom_density()
ggplot(pais_menor,
aes(media_suporte)) +
geom_histogram(bins = 20, fill = "white", color = "black") +
geom_density(fill = "purple")
ggplot(pais_menor,
aes(media_suporte)) +
geom_histogram(bins = 20, fill = "white", color = "black") +
geom_density(fill = "grey")
View(
pais_menor[
min(pais_menor$media_suporte) == pais_menor$media_suporte,]
]
View(
pais_menor[
min(pais_menor$media_suporte) == pais_menor$media_suporte]
]
View(
menor <-  pais_menor[
min(pais_menor$media_suporte) == pais_menor$media_suporte,]
]
View(
menor <-  pais_menor[
min(pais_menor$media_suporte) == pais_menor$media_suporte,]
)
mean(menor$media_corrupcao > pais_menor$media_corrupcao) * 100
paste(mean(menor$media_corrupcao > pais_menor$media_corrupcao) * 100,"%")
geom_point() +
geom_smooth(method = lm)
#Pergunta 5: Pessoas generosas são mais felizes?
ggplot(dados$Indice_Generosidade,
aes(x = Indice_generosidade,
x = Emocoes_positivas)) +
geom_point() +
geom_smooth(method = lm)
#Pergunta 5: Pessoas generosas são mais felizes?
ggplot(dados$Indice_Generosidade,
aes(x = Indice_generosidade,
y = Emocoes_positivas)) +
geom_point() +
geom_smooth(method = lm)
#Pergunta 5: Pessoas generosas são mais felizes?
ggplot(dados,
aes(x = Indice_generosidade,
y = Emocoes_positivas)) +
geom_point() +
geom_smooth(method = lm)
#Pergunta 5: Pessoas generosas são mais felizes?
ggplot(dados,
aes(x = Indice_Generosidade,
y = Emocoes_Positivas)) +
geom_point() +
geom_smooth(method = lm)
cor.test(x= dados$Indice_Generosidade,
y= dados$Emocoes_Positivas,
method= "pearson")
setwd('C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto2')
getwd()
# Importando dataset de um arquivo
fileSource = 'C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto2/files/A_E_Fire_Dataset.xlsx'
library(readxl)
# Importando dataset de um arquivo
fileSource = 'C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto2/files/A_E_Fire_Dataset.xlsx'
dados <- read_excel(filseSource)
dados <- read_excel(fileSource)
# Importando dataset de um arquivo
fileSource = 'C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto2/files/A_E_Fire_Dataset.xlsx'
dados <- read_excel(fileSource)
# Importando dataset de um arquivo
fileSource = 'C:/Users/joao.caparroz/Documents/Eu/Pessoal/Faculdade/Curso em R/Projeto2/files/Acoustic_Extinguisher_Fire_Dataset.xlsx'
dados <- read_excel(fileSource)
View(dados)
library(randomForest)
# Libs
install.packages("randomForest")
library(readxl)
library(randomForest)
library(caret)
# Libs
install.packages("randomForest","caret", "caTools", "class","gmodels", "ROCR", "e1071", "neuralnet")
install.packages("randomForest", "caret", "caTools", "class", "gmodels", "ROCR", "e1071", "neuralnet")
library(readxl)
library(randomForest)
library(caret)
sum(is.na(dados))
sum(row(dados))
str(dados)
summary(dados)
summary(dados$FUEL)
View(dados)
dados$FUEL <- as.factor(dados$FUEL)
View(dados)
str(dados)
?lapply()
nomes <- names(dados)
lapply(nomes, function(x){
if(is.numeric(unlist(dados[x]))){
boxplot(dados[x], main = x)
}
})
#Floresta aleatória
dados$FUEL <- as.numeric(dados$FUEL)
dados$STATUS <- as.factor(dados$STATUS)
#amostragem
amosta <- sample.split(dados$STATUS
splitRatio = 0.8)
library(randomForest)
library(caret)
library(caTools)
install.packages("caret")
install.packages("caTools")
install.packages("class")
install.packages("gmodels")
install.packages("ROCR")
install.packages("e1071")
install.packages("neuralnet")
install.packages("caret")
install.packages("caTools")
install.packages("class")
install.packages("gmodels")
install.packages("ROCR")
install.packages("e1071")
install.packages("neuralnet")
library(dplyr)
library(ggplot2)
library(readxl)
library(randomForest)
library(caret)
library(caTools)
library(class)
library(gmodels)
library(ROCR)
library(e1071)
library(neuralnet)
#amostragem
amosta <- sample.split(dados$STATUS
splitRatio = 0.8)
#amostragem
amosta <- sample.split(dados$STATUS,
splitRatio = 0.8)
#amostragem
amosta <- sample.split(dados$STATUS,
SplitRatio = 0.8)
View(amostra)
#amostragem
amostra <- sample.split(dados$STATUS,
SplitRatio = 0.8)
View(amostra)
treino <- subset(dados, amostra==TRUE)
teste <- subset(dados, amostra==FALSE)
View(treino)
normalizar <- function(x){
return(
(x-min(x))/max(x)-min(x)
)
}
dados_normalizados <- dados
View(
dados_normalizados <- as.data.frame(
lapply(dados_normalizados[-7],normalizar)
)
)
dados_normalizados <- as.data.frame(
lapply(dados_normalizados[-7],normalizar)
)
View(dados_normalizados)
floresta <- randomForest(STATUS - . , data=dados,
ntree = 100,
nodesize = 10,
importance = TRUE)
floresta <- randomForest(STATUS ~ . ,
data=dados,
ntree = 100,
nodesize = 10,
importance = TRUE)
View(floresta)
varImpPlot(floresta)
#k-nearest neighbors
amostra <- sample.split(dados_normalizados$STATUS,
SplitRatio = 0.8)
#k-nearest neighbors
dados_normalizados <- dados
amostra <- sample.split(dados_normalizados$STATUS,
SplitRatio = 0.8)
treino_m <- subset(dados_normalizados, amostra==TRUE)
teste_m <- subset(dados_normalizados, amostra==FALSE)
modelo_knn <- knn(traing= treino_m[,-7],
test=teste_m[,-7],
cl= treino_m$STATUS,
k=5
)
modelo_knn <- knn(train= treino_m[,-7],
test=teste_m[,-7],
cl= treino_m$STATUS,
k=5
)
confusionMatrix(modelo_knn,teste_m$STATUS)
CrossTable(x=teste_m$STATUS,
y=modelo_knn,
prop.chisq = FALSE)
??knn
pred <- prediction(as.numeric(modelo_knn),
as.numeric(teste_m$STATUS))
detach(package:neuralnet)
pred <- prediction(as.numeric(modelo_knn),
as.numeric(teste_m$STATUS))
perf <- performance(pred, "tpr", "fpr")
plot(perf, col = rainbow(10))
